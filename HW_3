{
	"info": {
		"_postman_id": "0e1d7c29-fec1-47c4-9e03-e2e3c845cbb4",
		"name": "HW_3",
		"description": "StartFragment\n\n**ДЗ_3 Postman**\n\n**\\=====**\n\n**1) необходимо залогиниться**\n\n**POST**\n\n**http://162.55.220.72:5005/login**\n\n**login : str (кроме /)**\n\n**password : str**\n\n**Приходящий токен необходимо передать во все остальные запросы.**\n\n**\\===================**\n\n**дальше все запросы требуют наличие токена.**\n\n**\\===================**\n\n**2) http://162.55.220.72:5005/user_info**\n\n**req. (RAW JSON)**\n\n**POST**\n\n**age: int**\n\n**salary: int**\n\n**name: str**\n\n**auth_token**\n\n**resp.**\n\n**{'start_qa_salary':salary,**\n\n **'qa_salary_after_6_months': salary \\* 2,**\n\n **'qa_salary_after_12_months': salary \\* 2.9,**\n\n **'person': {'u_name':\\[user_name, salary, age\\],**\n\n                                **'u_age':age,**\n\n                                **'u_salary_1.5_year': salary \\* 4}**\n\n                                **}**\n\n**Тесты:**\n\n**1) Статус код 200**\n\n**2) Проверка структуры json в ответе.**\n\n**3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.**\n\n**4) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user**\n\n**\\===================**\n\n**3) http://162.55.220.72:5005/new_data**\n\n**req.**\n\n**POST**\n\n**age: int**\n\n**salary: int**\n\n**name: str**\n\n**auth_token**\n\n**Resp.**\n\n**{'name':name,**\n\n  **'age': int(age),**\n\n  **'salary': \\[salary, str(salary\\*2), str(salary\\*3)\\]}**\n\n**Тесты:**\n\n**1) Статус код 200**\n\n**2) Проверка структуры json в ответе.**\n\n**3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.**\n\n**4) проверить, что 2-й элемент массива salary больше 1-го и 0-го**\n\n**\\===================**\n\n**4) http://162.55.220.72:5005/test_pet_info**\n\n**req.**\n\n**POST**\n\n**age: int**\n\n**weight: int**\n\n**name: str**\n\n**auth_token**\n\n**Resp.**\n\n**{'name': name,**\n\n **'age': age,**\n\n **'daily_food':weight \\* 0.012,**\n\n **'daily_sleep': weight \\* 2.5}**\n\n**Тесты:**\n\n**1) Статус код 200**\n\n**2) Проверка структуры json в ответе.**\n\n**3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.**\n\n**\\===================**\n\n**5) http://162.55.220.72:5005/get_test_user**\n\n**req.**\n\n**POST**\n\n**age: int**\n\n**salary: int**\n\n**name: str**\n\n**auth_token**\n\n**Resp.**\n\n**{'name': name,**\n\n **'age':age,**\n\n **'salary': salary,**\n\n **'family':{'children':\\[\\['Alex', 24\\],\\['Kate', 12\\]\\],**\n\n **'u_salary_1.5_year': salary \\* 4}**\n\n  **}**\n\n**Тесты:**\n\n**1) Статус код 200**\n\n**2) Проверка структуры json в ответе.**\n\n**3) Проверить что занчение поля name = значению переменной name из окружения**\n\n**4) Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age**\n\n**\\===================**\n\n**6) http://162.55.220.72:5005/currency**\n\n**req.**\n\n**POST**\n\n**auth_token**\n\n**Resp. Передаётся список массив объектов.**\n\n**\\[**\n\n**{\"Cur_Abbreviation\": str,**\n\n **\"Cur_ID\": int,**\n\n **\"Cur_Name\": str**\n\n**}**\n\n**…**\n\n**{\"Cur_Abbreviation\": str,**\n\n **\"Cur_ID\": int,**\n\n **\"Cur_Name\": str**\n\n**}**\n\n**\\]**\n\n**Тесты:**\n\n**1) Можете взять любой объект из присланного списка, используйте js random.**\n\n**В объекте возьмите Cur_ID и передать через окружение в следующий запрос.**\n\n **===================**\n\n**7) http://162.55.220.72:5005/curr_byn**\n\n**req.**\n\n**POST**\n\n**auth_token**\n\n**curr_code: int**\n\n**Resp.**\n\n**{**\n\n    **\"Cur_Abbreviation\": str**\n\n    **\"Cur_ID\": int,**\n\n    **\"Cur_Name\": str,**\n\n    **\"Cur_OfficialRate\": float,**\n\n    **\"Cur_Scale\": int,**\n\n    **\"Date\": str**\n\n**}**\n\n**Тесты:**\n\n**1) Статус код 200**\n\n**2) Проверка структуры json в ответе.**\n\n**\\===============**\n\n**\\*\n\n**1) получить список валют**\n\n**2) итерировать список валют**\n\n**3) в каждой итерации отправлять запрос на сервер для получения курса каждой валюты**\n\n**4) если возвращается 500 код, переходим к следующей итреации**\n\n**5) если получаем 200 код, проверяем response json на наличие поля \"Cur_OfficialRate\"**\n\n**6) если поле есть, пишем в консоль инфу про валюту в виде response**\n\n**{**\n\n    **\"Cur_Abbreviation\": str**\n\n    **\"Cur_ID\": int,**\n\n    **\"Cur_Name\": str,**\n\n    **\"Cur_OfficialRate\": float,**\n\n    **\"Cur_Scale\": int,**\n\n    **\"Date\": str**\n\n**}**\n\n**7) переходим к следующей итерации**\n\nEndFragment",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28161044"
	},
	"item": [
		{
			"name": "/login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"     var Res_body = pm.response.json();\r",
							"pm.test(\"Your time token\", function () {\r",
							"    pm.expect(Res_body).to.have.property(\"token\");\r",
							"});\r",
							"\r",
							"pm.environment.set (\"token\",Res_body.token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Vlad",
							"type": "text"
						},
						{
							"key": "password",
							"value": "Qwe",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Проверка структуры json в ответе\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"var Res_body = pm.response.json();\r",
							"var Req_json = JSON.parse(pm.request.body.raw);\r",
							"\r",
							"pm.test(\"salary req-res\", function () {\r",
							"       pm.expect(Res_body.start_qa_salary).to.eql(Req_json.salary);\r",
							"});\r",
							"\r",
							"pm.test(\"Check salary*2 req-res\", function () {\r",
							"        pm.expect(Res_body.qa_salary_after_6_months).to.eql(Req_json.salary*2);\r",
							"});\r",
							"\r",
							"pm.test(\"Check salary*2.9 req-res\", function () {\r",
							"        pm.expect(Res_body.qa_salary_after_12_months).to.eql(Req_json.salary*2.9);\r",
							"});\r",
							"\r",
							"pm.test(\"Check salary*4 req-res\", function () {\r",
							"        pm.expect(Res_body.person[\"u_salary_1_5_year\"]).to.eql(Req_json.salary*4);\r",
							"});\r",
							"\r",
							"pm.environment.set(\"salary\", Res_body.person[\"u_salary_1_5_year\"]);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"age\": 30,\r\n    \"salary\": 550,\r\n    \"name\": \"Vlad\",\r\n    \"auth_token\":\"/s34lfgbj/Vlad/jjd909/98108kjkWpqc4388Qwe181619evny\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/user_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "/get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Проверка структуры json в ответе\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"var Res_body = pm.response.json();\r",
							"var Req_body = request.data;\r",
							"\r",
							"pm.test(\"name\", function () {\r",
							"    pm.expect(Res_body.name).to.eql(pm.environment.get(\"name\"));\r",
							"});\r",
							"\r",
							"pm.test(\"age\", function () {\r",
							"    pm.expect(Res_body.age).to.eql(Req_body.age);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "30",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "550",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Vlad",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "/s34lfgbj/Vlad/jjd909/98108kjkWpqc4388Qwe181619evny",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/get_test_user",
					"host": [
						"{{url}}"
					],
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "/new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"var Res_body = pm.response.json();\r",
							"var Req_body = request.data;\r",
							"\r",
							"pm.test(\"Check salary req-res\", function () {\r",
							"       pm.expect(Res_body.salary[0]).to.eql(+Req_body.salary);\r",
							"});\r",
							"\r",
							"pm.test(\"Check salary*2 req-res\", function () {\r",
							"       pm.expect(+Res_body.salary[1]).to.eql(+Req_body.salary*2);\r",
							"});\r",
							"\r",
							"pm.test(\"Check salary*3 req-res\", function () {\r",
							"        pm.expect(+Res_body.salary[2]).to.eql(+Req_body.salary*3);\r",
							"});\r",
							"\r",
							"pm.test(\"Check second el in arr is max\", function () {\r",
							"    var R = +Res_body.salary[2] > +Res_body.salary[1] && +Res_body.salary[2] > +Res_body.salary[1];\r",
							"    pm.expect(R).to.equal(true);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "30",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "550",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Vlad",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "/s34lfgbj/Vlad/jjd909/98108kjkWpqc4388Qwe181619evny",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/new_data",
					"host": [
						"{{url}}"
					],
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "/test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"var Resp_body = pm.response.json();"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "30",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "75",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Vlad",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "/s34lfgbj/Vlad/jjd909/98108kjkWpqc4388Qwe181619evny",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/test_pet_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		}
	]
}